.data
strA:         .asciiz "original Array:\n "
strB:         .asciiz "second Array:\n "
newline:      .asciiz "\n"
space:        .asciiz " "

#this is the start of the original array.
original:     .word 200, 270, 250,  100
              .word 205, 230, 105,  235
              .word 190, 95,  90,   205
              .word 80,  205, 110,  215
# the next statement allocates room for the other Array
# the array takes up 4*16=64 bytes.
#
second: .space 64

.align 2
.globl main
.text

              #  $t0 is source address
              #  $t1 is temp
              #  $t2 holds destination address
main:
  la $t0, original    #  load address of original into t0
  lw $t1, 0($t0)      #  load word into t1 with offset of 0
  la $t2, second      #  load address of second(new array we're making), into t2
  sw $t1, 0($t2)      #  store t1 which holds 200 from our first original array

  lw $t1, 4($t0)
  sw $t1, 16($t2)

  lw $t1, 8($t0)
  sw $t1, 32($t2)

  lw $t1, 12($t0)
  sw $t1, 48($t2)

  lw $t1, 16($t0)
  sw $t1,   4($t2)

  lw $t1, 20($t0)
  sw $t1, 20($t2)

  lw $t1, 24($t0)
  sw $t1, 36($t2)

  lw $t1, 28($t0)
  sw $t1, 52($t2)

  lw $t1, 32($t0)
  sw $t1,   8($t2)

  lw $t1, 36($t0)
  sw $t1, 24($t2)

  lw $t1, 40($t0)
  sw $t1, 40($t2)

  lw $t1, 44($t0)
  sw $t1, 56($t2)

  lw $t1, 48($t0)
  sw $t1, 12($t2)

  lw $t1, 52($t0)
  sw $t1, 28($t2)

  lw $t1, 56($t0)
  sw $t1, 44($t2)

  lw $t1, 60($t0)
  sw $t1, 60($t2)

  li $v0, 4
  la $a0, strA
  syscall

  la $t0, original
  jal     print_matrix

  li $v0, 4
  la $a0, newline
  syscall

  li $v0, 4
  la $a0, strB
  syscall

  la $t0, second
  jal     print_matrix
  j EXIT

print_matrix:
  li $v0, 1
  lw $a0, 0($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall

  li $v0, 1
  lw $a0, 4($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall

  li $v0, 1
  lw $a0, 8($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall
  li $v0, 1
  lw $a0, 12($t0)
  syscall

  li $v0, 4
  la $a0, newline
  syscall




  li $v0, 1
  lw $a0, 16($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall

  li $v0, 1
  lw $a0, 20($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall

  li $v0, 1
  lw $a0, 24($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall
  li $v0, 1
  lw $a0, 28($t0)
  syscall

  li $v0, 4
  la $a0, newline
  syscall




  li $v0, 1
  lw $a0, 32($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall

  li $v0, 1
  lw $a0, 36($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall

  li $v0, 1
  lw $a0, 40($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall
  li $v0, 1
  lw $a0, 44($t0)
  syscall

  li $v0, 4
  la $a0, newline
  syscall




  li $v0, 1
  lw $a0, 48($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall

  li $v0, 1
  lw $a0, 52($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall

  li $v0, 1
  lw $a0, 56($t0)
  syscall

  li $v0, 4
  la $a0, space
  syscall
  li $v0, 1
  lw $a0, 60($t0)
  syscall

  li $v0, 4
  la $a0, newline
  syscall


  jr $ra

EXIT:
